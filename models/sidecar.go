// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Sidecar sidecar
//
// swagger:model Sidecar
type Sidecar struct {

	// blob
	Blob string `json:"blob,omitempty"`

	// index
	// Example: 1
	Index string `json:"index,omitempty"`

	// kzg commitment
	KzgCommitment string `json:"kzg_commitment,omitempty"`

	// kzg commitment inclusion proof
	KzgCommitmentInclusionProof []string `json:"kzg_commitment_inclusion_proof,omitempty"`

	// kzg proof
	KzgProof string `json:"kzg_proof,omitempty"`

	// signed block header
	SignedBlockHeader *SidecarSignedBlockHeader `json:"signed_block_header,omitempty"`

	// tx hash
	TxHash string `json:"tx_hash,omitempty"`

	// tx index
	TxIndex int64 `json:"tx_index,omitempty"`
}

// Validate validates this sidecar
func (m *Sidecar) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSignedBlockHeader(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Sidecar) validateSignedBlockHeader(formats strfmt.Registry) error {
	if swag.IsZero(m.SignedBlockHeader) { // not required
		return nil
	}

	if m.SignedBlockHeader != nil {
		if err := m.SignedBlockHeader.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signed_block_header")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signed_block_header")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sidecar based on the context it is used
func (m *Sidecar) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSignedBlockHeader(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Sidecar) contextValidateSignedBlockHeader(ctx context.Context, formats strfmt.Registry) error {

	if m.SignedBlockHeader != nil {
		if err := m.SignedBlockHeader.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signed_block_header")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signed_block_header")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Sidecar) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Sidecar) UnmarshalBinary(b []byte) error {
	var res Sidecar
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SidecarSignedBlockHeader sidecar signed block header
//
// swagger:model SidecarSignedBlockHeader
type SidecarSignedBlockHeader struct {

	// message
	Message *SidecarSignedBlockHeaderMessage `json:"message,omitempty"`

	// signature
	Signature string `json:"signature,omitempty"`
}

// Validate validates this sidecar signed block header
func (m *SidecarSignedBlockHeader) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SidecarSignedBlockHeader) validateMessage(formats strfmt.Registry) error {
	if swag.IsZero(m.Message) { // not required
		return nil
	}

	if m.Message != nil {
		if err := m.Message.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signed_block_header" + "." + "message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signed_block_header" + "." + "message")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sidecar signed block header based on the context it is used
func (m *SidecarSignedBlockHeader) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SidecarSignedBlockHeader) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if m.Message != nil {
		if err := m.Message.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signed_block_header" + "." + "message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signed_block_header" + "." + "message")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SidecarSignedBlockHeader) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SidecarSignedBlockHeader) UnmarshalBinary(b []byte) error {
	var res SidecarSignedBlockHeader
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SidecarSignedBlockHeaderMessage sidecar signed block header message
//
// swagger:model SidecarSignedBlockHeaderMessage
type SidecarSignedBlockHeaderMessage struct {

	// body root
	BodyRoot string `json:"body_root,omitempty"`

	// parent root
	ParentRoot string `json:"parent_root,omitempty"`

	// proposer index
	ProposerIndex string `json:"proposer_index,omitempty"`

	// slot
	Slot string `json:"slot,omitempty"`

	// state root
	StateRoot string `json:"state_root,omitempty"`
}

// Validate validates this sidecar signed block header message
func (m *SidecarSignedBlockHeaderMessage) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this sidecar signed block header message based on context it is used
func (m *SidecarSignedBlockHeaderMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SidecarSignedBlockHeaderMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SidecarSignedBlockHeaderMessage) UnmarshalBinary(b []byte) error {
	var res SidecarSignedBlockHeaderMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
